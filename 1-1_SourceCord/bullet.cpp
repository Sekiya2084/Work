/*==============================================================================

   弾管理 [bullet.cpp]
														 Author :関谷　勇人
														 Date   :2023/06/29
--------------------------------------------------------------------------------

==============================================================================*/
#include "bullet.h"
#include "input.h"
#include "sprite.h"
#include "texture.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************
static BULLET g_Bullet[MAX_BULLET]; //実体

static int g_BulletTexNo = 0; //テクスチャID
//=============================================================================
// 初期化処理
//=============================================================================
void InitBullet(void)
{
	ID3D11Device* pDevice = GetDevice();

	//テクスチャの読み込み
	g_BulletTexNo = LoadTexture((char*)"data/TEXTURE/bullet000.png");

	//初期化
	for (int i = 0; i < MAX_BULLET; i++)
	{
		g_Bullet[i].pos = D3DXVECTOR2(0.0f, 0.0f);
		g_Bullet[i].vel = D3DXVECTOR2(0.0f, 0.0f);
		g_Bullet[i].size = D3DXVECTOR2(0.0f, 0.0f);

		g_Bullet[i].use = false;
	}
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitBullet(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateBullet(void)
{
	for (int i = 0; i < MAX_BULLET; i++)
	{
		if (g_Bullet[i].use) 
		{
			//移動
			g_Bullet[i].pos += g_Bullet[i].vel;
			
			//画面外判定(画面外へ行った時使用フラグをFalseへ)
			if (g_Bullet[i].pos.x > SCREEN_WIDTH + g_Bullet[i].size.x / 2 || 
				g_Bullet[i].pos.y > SCREEN_HEIGHT + g_Bullet[i].size.y / 2	|| 
				g_Bullet[i].pos.x < 0.0f - g_Bullet[i].size.x / 2 || 
				g_Bullet[i].pos.y < 0.0f - g_Bullet[i].size.y / 2
				)
			{
				g_Bullet[i].use = false;
			}
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawBullet(void)
{
	for (int i = 0; i < MAX_BULLET; i++)
	{
		if (g_Bullet[i].use) 
		{
			//弾の描画
			DrawSprite(g_BulletTexNo,
				g_Bullet[i].pos.x, g_Bullet[i].pos.y,
				g_Bullet[i].size.x, g_Bullet[i].size.y,
				0.0f, 0.0f,
				1.0f, 1.0f
			);
		}
	}
}

//=============================================================================
// セット関数
//=============================================================================
void SetBullet(D3DXVECTOR2 spos, D3DXVECTOR2 svel, D3DXVECTOR2 ssize)
{
	for (int i = 0; i < MAX_BULLET; i++)
	{
		if (!g_Bullet[i].use)
		{
			g_Bullet[i].pos = spos;
			g_Bullet[i].vel = svel;
			g_Bullet[i].size = ssize;

			g_Bullet[i].use = true;
			break;
		}
	}
}

//=============================================================================
// 実体のアドレス取得関数
//=============================================================================
BULLET* GetBullet(void) 
{
	return g_Bullet;
}